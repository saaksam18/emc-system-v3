import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue } from '@/components/ui/select';
import { SheetClose, SheetFooter } from '@/components/ui/sheet'; // Assuming this is used within a Sheet component
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/utils';
import { Vehicle, VehicleClass, VehicleMakerType, VehicleModelType, VehicleStatusType } from '@/types'; // Assuming types are defined elsewhere
import { useForm } from '@inertiajs/react';
import { FormEventHandler, useEffect, useMemo, useState } from 'react';
import { toast } from 'sonner'; // Assuming sonner is setup for notifications

// Define the shape of the form data for editing
// Omit fields not directly edited or generated by backend
type EditFormValues = Omit<Vehicle, 'id' | 'created_at' | 'updated_at' | 'primary_contact_type' | 'primary_contact'> & {
    purchase_date?: string | null; // Allow null or undefined initially
    vehicle_class_id: string;
    current_status_id: string;
    photo?: File | null;
    _method?: 'PUT';
};

// Define the shape for potential errors
type FormErrors = Partial<
    Record<
        keyof EditFormValues | 'purchase_month' | 'purchase_day' | 'purchase_year', // Include specific date parts if needed
        string
    >
>;

// --- Helper Function to get the number of days in a month ---
const getDaysInMonth = (month: number | null, year: string | number): number => {
    const yearNum = typeof year === 'string' ? parseInt(year) : year;
    if (!month) return 31;
    if (isNaN(yearNum) || yearNum < 1000 || yearNum > 3000) return 31;
    return new Date(yearNum, month, 0).getDate();
};

// --- Constants ---
const currentYear = new Date().getFullYear();
const monthOptions = Array.from({ length: 12 }, (_, i) => ({
    value: i + 1,
    label: new Date(0, i).toLocaleString('default', { month: 'long' }),
}));

// --- Reusable Form Field Component (using grid for alignment) ---
interface FormFieldProps {
    label: string;
    htmlFor: string;
    error?: string;
    required?: boolean;
    children: React.ReactNode;
    className?: string;
    labelClassName?: string;
    contentClassName?: string;
}
const FormField: React.FC<FormFieldProps> = ({ label, htmlFor, error, required, children, className, labelClassName, contentClassName }) => (
    <div className={cn('grid grid-cols-1 items-start gap-4 md:grid-cols-4 md:items-center', className)}>
        <Label htmlFor={htmlFor} className={cn('text-left md:text-right', labelClassName)}>
            {label}
            {required && <span className="text-red-500">*</span>}
        </Label>
        <div className={cn('col-span-1 md:col-span-3', contentClassName)}>
            {children}
            {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
        </div>
    </div>
);

// --- Component Props ---
interface EditProps {
    vehicle: Vehicle | null; // The vehicle data to edit
    vehicle_class: VehicleClass[] | null | undefined;
    vehicle_models: VehicleModelType[];
    vehicle_makers: VehicleMakerType[];
    vehicle_status: VehicleStatusType[];
    onUpdateSuccess: () => void; // Callback on successful update
}

// --- Main Edit Component ---
export function Edit({ vehicle, onUpdateSuccess, vehicle_class, vehicle_status, vehicle_models, vehicle_makers }: EditProps) {
    // --- State for separate Purchase Date inputs ---
    // Initialize date parts based on the incoming vehicle.purchase_date
    const initialDate = vehicle?.purchase_date ? new Date(vehicle.purchase_date + 'T00:00:00') : null; // Ensure correct parsing by adding time
    const [purchaseMonth, setPurchaseMonth] = useState<number | null>(initialDate ? initialDate.getMonth() + 1 : null);
    const [purchaseDay, setPurchaseDay] = useState<string>(initialDate ? String(initialDate.getDate()) : '');
    const [purchaseYear, setPurchaseYear] = useState<string>(initialDate ? String(initialDate.getFullYear()) : '');
    const [daysInMonth, setDaysInMonth] = useState<number>(initialDate ? getDaysInMonth(initialDate.getMonth() + 1, initialDate.getFullYear()) : 31);

    // Inertia form helper hook, initialized with vehicle data
    // Ensure IDs are strings for Select compatibility if they come as numbers
    const { data, setData, post, processing, errors, reset, clearErrors } = useForm<EditFormValues>({
        vehicle_no: String(vehicle?.vehicle_no) ?? '',
        make: vehicle?.make ?? '',
        model: vehicle?.model ?? '',
        year: vehicle?.year ?? '',
        license_plate: vehicle?.license_plate ?? '',
        vin: vehicle?.vin ?? '',
        color: vehicle?.color ?? '',
        engine_cc: vehicle?.engine_cc ?? '',
        // Convert IDs to string for Select value comparison
        vehicle_class_id: String(vehicle?.vehicle_class_id ?? ''),
        compensation_price: vehicle?.compensation_price ?? '',
        purchase_price: vehicle?.purchase_price ?? '',
        // Initialize purchase_date from vehicle, handle null/undefined
        purchase_date: vehicle?.purchase_date ? vehicle.purchase_date.split('T')[0] : null, // Store as YYYY-MM-DD or null
        daily_rental_price: vehicle?.daily_rental_price ?? '',
        weekly_rental_price: vehicle?.weekly_rental_price ?? '',
        monthly_rental_price: vehicle?.monthly_rental_price ?? '',
        // Convert IDs to string for Select value comparison
        current_status_id: String(vehicle?.current_status_id ?? ''),
        current_location: vehicle?.current_location ?? '',
        notes: vehicle?.notes ?? '',
        photo: null,
    });
    // Type assertion for errors
    const formErrors = errors as FormErrors;

    // --- Effect to calculate max days in the selected month and year ---
    useEffect(() => {
        const numDays = getDaysInMonth(purchaseMonth, purchaseYear);
        setDaysInMonth(numDays);
        const dayNum = parseInt(purchaseDay);
        if (!isNaN(dayNum) && dayNum > numDays) {
            setPurchaseDay(''); // Reset day if it becomes invalid due to month/year change
        }
    }, [purchaseMonth, purchaseYear, purchaseDay]);

    // --- Effect to update Inertia form data 'purchase_date' when date parts change ---
    useEffect(() => {
        const month = purchaseMonth;
        const day = parseInt(purchaseDay);
        const year = parseInt(purchaseYear);

        // Check if all parts form a valid date
        if (month && !isNaN(day) && day >= 1 && day <= daysInMonth && !isNaN(year) && year >= 1900 && year <= currentYear + 1) {
            // Format date as YYYY-MM-DD
            const formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            // Update Inertia form data only if it's different
            if (formattedDate !== data.purchase_date) {
                setData('purchase_date', formattedDate);
                if (formErrors.purchase_date) clearErrors('purchase_date');
            }
        } else {
            // If the date parts are incomplete or invalid, set purchase_date to null
            // Only update if it's not already null/undefined
            if (data.purchase_date !== null && data.purchase_date !== undefined) {
                setData('purchase_date', null); // Use null for empty/invalid date
            }
            // Clear errors if the user is clearing the date fields
            if (!purchaseMonth && !purchaseDay && !purchaseYear && formErrors.purchase_date) {
                clearErrors('purchase_date');
            }
        }
        // Note: data.purchase_date is included in dependency array to react to external changes if needed,
        // but the primary trigger should be the manual date part inputs.
    }, [purchaseMonth, purchaseDay, purchaseYear, daysInMonth, setData, data.purchase_date, clearErrors, formErrors.purchase_date]);

    // --- Generic Input Change Handler ---
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target as (HTMLInputElement | HTMLTextAreaElement) & { name: keyof EditFormValues };
        setData(name, value);
        if (formErrors[name]) clearErrors(name);
    };

    // --- Photo File Change Handler ---
    const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files ? e.target.files[0] : null;
        if (file) {
            if (file.size > 10 * 1024 * 1024) {
                // 10MB
                toast.error('File size cannot exceed 10MB.');
                e.target.value = '';
                setData('photo', null);
            } else {
                setData('photo', file);
            }
        } else {
            setData('photo', null);
        }
    };

    // --- Generic Select Change Handler (expects ID as value) ---
    const handleSelectChange = (name: keyof EditFormValues, value: string) => {
        // The 'value' received from Shadcn Select is the ID (as a string)
        setData(name, value);
        if (formErrors[name]) clearErrors(name);
    };

    // --- Purchase Date Input Handlers ---
    const handlePurchaseMonthChange = (value: string) => {
        setPurchaseMonth(value ? parseInt(value) : null);
        if (formErrors.purchase_date) clearErrors('purchase_date');
    };
    const handlePurchaseDayChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPurchaseDay(e.target.value);
        if (formErrors.purchase_date) clearErrors('purchase_date');
    };
    const handlePurchaseDayBlur = (e: React.FocusEvent<HTMLInputElement>) => {
        const dayNum = parseInt(e.target.value);
        if (e.target.value !== '' && (isNaN(dayNum) || dayNum < 1 || dayNum > daysInMonth)) {
            setPurchaseDay('');
        }
    };
    const handlePurchaseYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPurchaseYear(e.target.value);
        if (formErrors.purchase_date) clearErrors('purchase_date');
    };
    const handlePurchaseYearBlur = (e: React.FocusEvent<HTMLInputElement>) => {
        const yearNum = parseInt(e.target.value);
        if (e.target.value !== '' && (isNaN(yearNum) || yearNum < 1900 || yearNum > currentYear + 1)) {
            setPurchaseYear('');
        }
    };

    // --- Memoized Data for Select Options ---
    const validVehicleClass = useMemo(
        () =>
            Array.isArray(vehicle_class) ? vehicle_class.filter((v): v is VehicleClass => !!v && typeof v.name === 'string' && v.name !== '') : [],
        [vehicle_class],
    );
    const validVehicleMakers = useMemo(
        () =>
            Array.isArray(vehicle_makers)
                ? vehicle_makers.filter((v): v is VehicleMakerType => !!v && typeof v.name === 'string' && v.name !== '')
                : [],
        [vehicle_makers],
    );
    const validVehicleStatus = useMemo(
        () =>
            Array.isArray(vehicle_status)
                ? vehicle_status.filter((v): v is VehicleStatusType => !!v && typeof v.status_name === 'string' && v.status_name !== '')
                : [],
        [vehicle_status],
    );

    // Filter models based on the selected maker
    const availableModels = useMemo(() => {
        const models = Array.isArray(vehicle_models) ? vehicle_models : [];
        if (!data.make || !validVehicleMakers.length || !models.length) return [];
        // Find the selected maker object by name to get its ID
        const selectedMaker = validVehicleMakers.find((m) => m.name === data.make);
        return selectedMaker
            ? models.filter((m): m is VehicleModelType => m && typeof m.maker_id !== 'undefined' && String(m.maker_id) === String(selectedMaker.id))
            : [];
    }, [data.make, vehicle_models, validVehicleMakers]);

    // --- Specific Handler for Make Change ---
    // Reset model when make changes
    const handleMakeChange = (value: string) => {
        // Find the maker object corresponding to the selected name
        const selectedMaker = validVehicleMakers.find((m) => m.name === value);
        // Update make (using the name) and reset model
        setData((prev) => ({
            ...prev,
            make: selectedMaker ? selectedMaker.name : '', // Store the name
            model: '', // Reset model selection
        }));
        if (formErrors.make) clearErrors('make');
        if (formErrors.model) clearErrors('model');
    };

    // --- Specific Handler for Model Change ---
    const handleModelChange = (value: string) => {
        // Find the model object corresponding to the selected name
        // Note: 'value' here is the model name selected in the dropdown
        const selectedModel = availableModels.find((m) => m.name === value);
        setData('model', selectedModel ? selectedModel.name : ''); // Store the name
        if (formErrors.model) clearErrors('model');
    };

    // --- Form Submission Handler ---
    const handleSubmit: FormEventHandler = (e) => {
        e.preventDefault();
        clearErrors();

        if (!vehicle) {
            toast.error('No vehicle selected for editing.');
            return;
        }

        // Construct the URL for the PUT request
        const url = `/vehicles/${vehicle.id}/update`; // Use the vehicle's ID

        const handleError = (errs: Record<string, string>) => {
            console.error('Update error:', errs);
            if (errs && Object.keys(errs).length > 0) {
                Object.entries(errs).forEach(([, msg]) => {
                    if (msg) toast.error(msg);
                });
            } else {
                toast.error('Failed to update vehicle. Please check the form.');
            }
        };

        const handleSuccess = () => {
            onUpdateSuccess(); // Call the success callback
        };

        // To handle file uploads on a PUT route, we must make a POST request
        // and spoof the method. We'll add `_method: 'PUT'` to the form data
        // and use the `post` helper.
        setData('_method', 'PUT');
        post(url, {
            onSuccess: handleSuccess,
            onError: handleError,
            preserveState: (page) => Object.keys(page.props.errors).length > 0,
            preserveScroll: true,
            onFinish: () => {
                // Clean up the _method field after the request is finished
                setData('_method', undefined);
            },
        });
    };

    // --- Constants for UI ---
    const suggestedLocations = ['With Customer', 'Front Garage', 'Rear Garage', 'Workshop'];
    const title = 'Edit Vehicle Details';
    const description = `Editing vehicle: ${vehicle?.vehicle_no || 'N/A'}. Modify the details below and click save.`;

    // --- JSX ---
    return (
        <div className="px-1 py-4 md:px-4">
            <form onSubmit={handleSubmit} className="space-y-6">
                {/* Basic Information Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Basic Information</CardTitle>
                        <CardDescription>Essential details about the vehicle.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {/* Vehicle No (Often non-editable, but shown for context) */}
                        <FormField label="Vehicle No" htmlFor="edit-vehicle_no" error={formErrors.vehicle_no} required>
                            <Input
                                id="edit-vehicle_no"
                                name="vehicle_no"
                                value={data.vehicle_no}
                                onChange={handleInputChange}
                                autoFocus // Focus on the first editable field if needed
                                autoComplete="off"
                                className={cn(formErrors.vehicle_no && 'border-red-500')}
                                // Consider making it read-only if it shouldn't be changed
                                // readOnly
                            />
                        </FormField>

                        {/* Make Select */}
                        <FormField label="Make" htmlFor="edit-make" error={formErrors.make} required>
                            <Select
                                required
                                name="make"
                                value={data.make || ''} // Value is the maker's name
                                onValueChange={handleMakeChange} // Use specific handler
                                disabled={processing || validVehicleMakers.length === 0}
                            >
                                <SelectTrigger id="edit-make" className={cn(formErrors.make && 'border-red-500')} aria-label="Select maker">
                                    <SelectValue placeholder="Select maker" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Maker</SelectLabel>
                                        {validVehicleMakers.map((m) => (
                                            <SelectItem key={m.id} value={m.name}>
                                                {' '}
                                                {/* Value is name */}
                                                {m.name.charAt(0).toUpperCase() + m.name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {validVehicleMakers.length === 0 && (
                                            <SelectItem value="no-makers" disabled>
                                                No makers available
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>

                        {/* Model Select */}
                        <FormField label="Model" htmlFor="edit-model" error={formErrors.model} required>
                            <Select
                                required
                                name="model"
                                value={data.model || ''} // Value is the model's name
                                onValueChange={handleModelChange} // Use specific handler
                                disabled={processing || !data.make || availableModels.length === 0}
                            >
                                <SelectTrigger id="edit-model" className={cn(formErrors.model && 'border-red-500')} aria-label="Select model">
                                    <SelectValue placeholder={!data.make ? 'Select make first' : 'Select model'} />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Model</SelectLabel>
                                        {availableModels.map((m) => (
                                            <SelectItem key={m.id} value={m.name}>
                                                {' '}
                                                {/* Value is name */}
                                                {m.name.charAt(0).toUpperCase() + m.name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {data.make && availableModels.length === 0 && (
                                            <SelectItem value="no-models" disabled>
                                                No models found for {data.make}
                                            </SelectItem>
                                        )}
                                        {!data.make && (
                                            <SelectItem value="select-make" disabled>
                                                Select a make first
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>

                        {/* Year Input */}
                        <FormField label="Year" htmlFor="edit-year" error={formErrors.year} required>
                            <Input
                                id="edit-year"
                                name="year"
                                type="number"
                                value={data.year}
                                onChange={handleInputChange}
                                className={cn(formErrors.year && 'border-red-500')}
                                min="1900"
                                max={currentYear + 1}
                            />
                        </FormField>

                        {/* License Plate Input */}
                        <FormField label="License Plate" htmlFor="edit-license_plate" error={formErrors.license_plate} required>
                            <Input
                                id="edit-license_plate"
                                name="license_plate"
                                value={data.license_plate}
                                onChange={handleInputChange}
                                className={cn(formErrors.license_plate && 'border-red-500')}
                            />
                        </FormField>

                        {/* VIN Input */}
                        <FormField label="VIN" htmlFor="edit-vin" error={formErrors.vin}>
                            <Input
                                id="edit-vin"
                                name="vin"
                                value={data.vin ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.vin && 'border-red-500')}
                            />
                        </FormField>

                        {/* Color Input */}
                        <FormField label="Color" htmlFor="edit-color" error={formErrors.color} required>
                            <Input
                                id="edit-color"
                                name="color"
                                value={data.color ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.color && 'border-red-500')}
                            />
                        </FormField>

                        {/* Engine CC Input */}
                        <FormField label="Engine CC" htmlFor="edit-engine_cc" error={formErrors.engine_cc} required>
                            <Input
                                id="edit-engine_cc"
                                name="engine_cc"
                                type="number"
                                value={data.engine_cc ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.engine_cc && 'border-red-500')}
                                min="0"
                            />
                        </FormField>

                        <FormField label="Photo" htmlFor="edit-photo" error={formErrors.photo}>
                            {vehicle?.photo_path && (
                                <img src={vehicle.photo_path} alt="Current Vehicle" className="mb-4 h-32 w-32 rounded-md object-cover" />
                            )}
                            <Input
                                id="edit-photo"
                                type="file"
                                accept="image/png"
                                onChange={handlePhotoChange}
                                className={cn(formErrors.photo && 'border-red-500')}
                            />
                            <p className="text-muted-foreground mt-1 text-xs">
                                {vehicle?.photo_path ? 'Upload a new photo to replace the current one.' : 'Upload a photo.'} Max 10MB.
                            </p>
                        </FormField>

                        {/* Class Select */}
                        <FormField label="Class" htmlFor="edit-vehicle_class_id" error={formErrors.vehicle_class_id} required>
                            <Select
                                required
                                name="vehicle_class_id"
                                value={data.vehicle_class_id || ''} // Value is the ID (as string)
                                onValueChange={(v) => handleSelectChange('vehicle_class_id', v)} // Sends ID string
                                disabled={processing || validVehicleClass.length === 0}
                            >
                                <SelectTrigger
                                    id="edit-vehicle_class_id"
                                    className={cn(formErrors.vehicle_class_id && 'border-red-500')}
                                    aria-label="Select Class"
                                >
                                    <SelectValue placeholder="Select class" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Class</SelectLabel>
                                        {validVehicleClass.map((c) => (
                                            <SelectItem key={c.id} value={String(c.id)}>
                                                {' '}
                                                {/* Value is ID string */}
                                                {c.name.charAt(0).toUpperCase() + c.name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {validVehicleClass.length === 0 && (
                                            <SelectItem value="no-classes" disabled>
                                                No classes available
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>
                    </CardContent>
                </Card>

                {/* Purchase & Pricing Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Purchase & Pricing</CardTitle>
                        <CardDescription>Details about acquisition and rental costs.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {/* Purchase Price Input */}
                        <FormField label="Purchase Price" htmlFor="edit-purchase_price" error={formErrors.purchase_price} required>
                            <Input
                                id="edit-purchase_price"
                                name="purchase_price"
                                type="number"
                                step="0.01"
                                value={data.purchase_price ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.purchase_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 15000.00"
                            />
                        </FormField>

                        {/* Purchase Date using separate inputs */}
                        <FormField label="Purchase Date" htmlFor="purchase_month" error={formErrors.purchase_date} required>
                            <div className="flex w-full flex-col gap-2 sm:flex-row sm:gap-3">
                                {/* Month Select */}
                                <div className="flex-1">
                                    <Label htmlFor="purchase_month" className="sr-only">
                                        Month
                                    </Label>
                                    <Select value={purchaseMonth ? String(purchaseMonth) : ''} onValueChange={handlePurchaseMonthChange}>
                                        <SelectTrigger
                                            id="purchase_month"
                                            className={cn(formErrors.purchase_date && 'border-red-500')}
                                            aria-label="Month"
                                        >
                                            <SelectValue placeholder="Month" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {monthOptions.map((option) => (
                                                <SelectItem key={option.value} value={String(option.value)}>
                                                    {option.label}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                                {/* Day Input */}
                                <div className="flex-1">
                                    <Label htmlFor="purchase_day" className="sr-only">
                                        Day
                                    </Label>
                                    <Input
                                        id="purchase_day"
                                        type="number"
                                        placeholder="Day"
                                        value={purchaseDay}
                                        onChange={handlePurchaseDayChange}
                                        onBlur={handlePurchaseDayBlur}
                                        min="1"
                                        max={daysInMonth}
                                        disabled={!purchaseMonth}
                                        className={cn(formErrors.purchase_date && 'border-red-500')}
                                        aria-label="Day"
                                    />
                                </div>
                                {/* Year Input */}
                                <div className="flex-1">
                                    <Label htmlFor="purchase_year" className="sr-only">
                                        Year
                                    </Label>
                                    <Input
                                        id="purchase_year"
                                        type="number"
                                        placeholder="Year"
                                        value={purchaseYear}
                                        onChange={handlePurchaseYearChange}
                                        onBlur={handlePurchaseYearBlur}
                                        min="1900"
                                        max={currentYear + 1} // Allow future year for purchase date? Adjusted to currentYear+1
                                        className={cn(formErrors.purchase_date && 'border-red-500')}
                                        aria-label="Year"
                                    />
                                </div>
                            </div>
                        </FormField>

                        {/* Compensation Price Input */}
                        <FormField label="Compensation Price" htmlFor="edit-compensation_price" error={formErrors.compensation_price} required>
                            <Input
                                id="edit-compensation_price"
                                name="compensation_price"
                                type="number"
                                step="0.01"
                                value={data.compensation_price ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.compensation_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 20000.00"
                            />
                        </FormField>

                        {/* Daily Price Input */}
                        <FormField label="Daily Price" htmlFor="edit-daily_rental_price" error={formErrors.daily_rental_price} required>
                            <Input
                                id="edit-daily_rental_price"
                                name="daily_rental_price"
                                type="number"
                                step="0.01"
                                required
                                value={data.daily_rental_price}
                                onChange={handleInputChange}
                                className={cn(formErrors.daily_rental_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 50.00"
                            />
                        </FormField>

                        {/* Weekly Price Input */}
                        <FormField label="Weekly Price" htmlFor="edit-weekly_rental_price" error={formErrors.weekly_rental_price} required>
                            <Input
                                id="edit-weekly_rental_price"
                                name="weekly_rental_price"
                                type="number"
                                step="0.01"
                                required
                                value={data.weekly_rental_price}
                                onChange={handleInputChange}
                                className={cn(formErrors.weekly_rental_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 300.00"
                            />
                        </FormField>

                        {/* Monthly Price Input */}
                        <FormField label="Monthly Price" htmlFor="edit-monthly_rental_price" error={formErrors.monthly_rental_price} required>
                            <Input
                                id="edit-monthly_rental_price"
                                name="monthly_rental_price"
                                type="number"
                                step="0.01"
                                required
                                value={data.monthly_rental_price}
                                onChange={handleInputChange}
                                className={cn(formErrors.monthly_rental_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 1000.00"
                            />
                        </FormField>
                    </CardContent>
                </Card>

                {/* Status & Location Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Status & Location</CardTitle>
                        <CardDescription>Current status and location of the vehicle.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {/* Status Select */}
                        <FormField label="Status" htmlFor="edit-current_status_id" error={formErrors.current_status_id} required>
                            <Select
                                required
                                name="current_status_id"
                                value={data.current_status_id || ''} // Value is the ID (as string)
                                onValueChange={(v) => handleSelectChange('current_status_id', v)} // Sends ID string
                                disabled={processing || validVehicleStatus.length === 0}
                            >
                                <SelectTrigger
                                    id="edit-current_status_id"
                                    className={cn(formErrors.current_status_id && 'border-red-500')}
                                    aria-label="Select status"
                                >
                                    <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Status</SelectLabel>
                                        {validVehicleStatus.map((s) => (
                                            <SelectItem key={s.id} value={String(s.id)}>
                                                {' '}
                                                {/* Value is ID string */}
                                                {s.status_name.charAt(0).toUpperCase() + s.status_name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {validVehicleStatus.length === 0 && (
                                            <SelectItem value="no-status" disabled>
                                                No statuses available
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>

                        {/* Location Input */}
                        <FormField label="Location" htmlFor="edit-current_location" error={formErrors.current_location}>
                            <Input
                                id="edit-current_location"
                                name="current_location"
                                value={data.current_location ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.current_location && 'border-red-500')}
                                list="edit-location-suggestions" // Unique datalist ID
                                placeholder="e.g., Front Garage"
                            />
                            <datalist id="edit-location-suggestions">
                                {suggestedLocations.map((loc) => (
                                    <option key={loc} value={loc} />
                                ))}
                            </datalist>
                            <p className="text-muted-foreground mt-1 text-xs">Type or select a location (e.g., With Customer, Front Garage).</p>
                        </FormField>

                        {/* Notes Textarea */}
                        <FormField label="Notes" htmlFor="edit-notes" error={formErrors.notes} labelClassName="pt-2">
                            <Textarea
                                id="edit-notes"
                                name="notes"
                                value={data.notes ?? ''}
                                onChange={handleInputChange}
                                className={cn('col-span-3', formErrors.notes && 'border-red-500')}
                                rows={4}
                                placeholder="Add any relevant notes about the vehicle..."
                            />
                        </FormField>
                    </CardContent>
                </Card>

                {/* Form Footer with Actions */}
                <SheetFooter className="mt-6 border-t pt-4">
                    {/* Cancel Button (Assumes SheetClose is appropriate context) */}
                    <SheetClose asChild>
                        <Button type="button" variant="outline" disabled={processing} onClick={() => reset()}>
                            {' '}
                            {/* Optionally reset on cancel */}
                            Cancel
                        </Button>
                    </SheetClose>
                    {/* Submit Button */}
                    <Button type="submit" disabled={processing}>
                        {processing ? 'Saving...' : 'Save Changes'}
                    </Button>
                </SheetFooter>
            </form>
        </div>
    );
}
