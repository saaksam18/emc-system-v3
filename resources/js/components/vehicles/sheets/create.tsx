import { Button } from '@/components/ui/button';
// Removed Calendar import as it wasn't used for purchase date
// import { Calendar } from '@/components/ui/calendar';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
// Removed Dialog imports as they weren't used
// import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue } from '@/components/ui/select';
import { SheetClose, SheetFooter } from '@/components/ui/sheet';
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/utils';
import { Vehicle, VehicleClass, VehicleMakerType, VehicleModelType, VehicleStatusType } from '@/types'; // Assuming types are defined elsewhere
import { useForm } from '@inertiajs/react';
// Removed format import as it wasn't used after removing Calendar logic
// import { format } from 'date-fns';
// Removed CalendarIcon import
// import { CalendarIcon } from 'lucide-react';
import { FormEventHandler, useEffect, useMemo, useState } from 'react';
import { toast } from 'sonner'; // Assuming sonner is setup for notifications

// Define the shape of the form data, omitting fields generated by the backend
type InitialFormValues = Omit<Vehicle, 'id' | 'created_at' | 'updated_at' | 'primary_contact_type' | 'primary_contact'> & {
    // purchase_date is optional initially until fully formed
    purchase_date?: string;
};

// Define the shape for potential errors specifically for date parts
type FormErrors = Partial<
    Record<
        keyof InitialFormValues | 'purchase_month' | 'purchase_day' | 'purchase_year', // Include specific date parts if needed, though Inertia usually returns errors on the combined field
        string
    >
>;

// --- Helper Function to get the number of days in a month ---
const getDaysInMonth = (month: number | null, year: string | number): number => {
    // Ensure year is a number
    const yearNum = typeof year === 'string' ? parseInt(year) : year;
    // If month is not selected, default to 31 (won't restrict day input yet)
    if (!month) return 31;
    // Basic validation for year to prevent invalid Date object
    if (isNaN(yearNum) || yearNum < 1000 || yearNum > 3000) return 31;
    // Get the last day of the given month and year
    return new Date(yearNum, month, 0).getDate();
};

// --- Constants ---
const currentYear = new Date().getFullYear();
const monthOptions = Array.from({ length: 12 }, (_, i) => ({
    value: i + 1,
    label: new Date(0, i).toLocaleString('default', { month: 'long' }), // Get full month name
}));

const initialFormValues: InitialFormValues = {
    vehicle_no: '',
    make: '',
    model: '',
    year: '',
    license_plate: '',
    vin: '',
    color: '',
    engine_cc: '',
    vehicle_class_id: '', // Store ID, but display name
    compensation_price: '',
    purchase_price: '',
    purchase_date: undefined, // Initialize as undefined
    daily_rental_price: '',
    weekly_rental_price: '',
    monthly_rental_price: '',
    current_status_id: '', // Store ID, but display name
    current_location: '',
    notes: '',
};

// --- Reusable Form Field Component (using grid for alignment) ---
interface FormFieldProps {
    label: string;
    htmlFor: string; // ID of the primary input element for the label
    error?: string;
    required?: boolean;
    children: React.ReactNode;
    className?: string; // Optional class for the container div
    labelClassName?: string; // Optional class for the label
    contentClassName?: string; // Optional class for the content div
}
const FormField: React.FC<FormFieldProps> = ({ label, htmlFor, error, required, children, className, labelClassName, contentClassName }) => (
    <div className={cn('grid grid-cols-1 items-start gap-4 md:grid-cols-4 md:items-center', className)}>
        {/* Label aligned to the right on medium screens and above */}
        <Label htmlFor={htmlFor} className={cn('text-left md:text-right', labelClassName)}>
            {label}
            {required && <span className="text-red-500">*</span>} {/* Indicate required fields */}
        </Label>
        {/* Content takes up remaining columns */}
        <div className={cn('col-span-1 md:col-span-3', contentClassName)}>
            {children}
            {/* Display error message below the input */}
            {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
        </div>
    </div>
);

// --- Component Props ---
interface CreateProps {
    // Data fetched from the backend for dropdowns
    vehicle_class: VehicleClass[] | null | undefined;
    vehicle_models: VehicleModelType[];
    vehicle_makers: VehicleMakerType[];
    vehicle_status: VehicleStatusType[];
    // Callback function when the form submission is successful
    onSubmitSuccess: () => void;
}

// --- Main Create Component ---
export function Create({ onSubmitSuccess, vehicle_class, vehicle_status, vehicle_models, vehicle_makers }: CreateProps) {
    // Inertia form helper hook
    const { data, setData, post, processing, errors, reset, clearErrors } = useForm<InitialFormValues>(initialFormValues);
    // Type assertion for errors to include potential date part errors if backend sends them separately
    const formErrors = errors as FormErrors;

    // --- State for separate Purchase Date inputs ---
    const [purchaseMonth, setPurchaseMonth] = useState<number | null>(null);
    const [purchaseDay, setPurchaseDay] = useState<string>('');
    const [purchaseYear, setPurchaseYear] = useState<string>('');
    const [daysInMonth, setDaysInMonth] = useState<number>(31); // Max days allowed in the day input

    // --- Effect to calculate max days in the selected month and year ---
    useEffect(() => {
        const numDays = getDaysInMonth(purchaseMonth, purchaseYear);
        setDaysInMonth(numDays);
        // If the current day value exceeds the new max days, clear it
        const dayNum = parseInt(purchaseDay);
        if (!isNaN(dayNum) && dayNum > numDays) {
            setPurchaseDay(''); // Reset day if it becomes invalid
        }
    }, [purchaseMonth, purchaseYear, purchaseDay]); // Rerun when month, year, or day changes

    // --- Effect to update Inertia form data 'purchase_date' when date parts change ---
    useEffect(() => {
        const month = purchaseMonth;
        const day = parseInt(purchaseDay);
        const year = parseInt(purchaseYear);

        // Check if all parts form a valid date
        if (month && !isNaN(day) && day >= 1 && day <= daysInMonth && !isNaN(year) && year >= 1900 && year <= currentYear + 1) {
            // Format date as YYYY-MM-DD
            const formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            // Update Inertia form data only if it's different
            if (formattedDate !== data.purchase_date) {
                setData('purchase_date', formattedDate);
                // Clear any previous errors for the combined purchase_date field
                if (formErrors.purchase_date) clearErrors('purchase_date');
            }
        } else {
            // If the date parts are incomplete or invalid, set purchase_date to undefined
            if (data.purchase_date !== undefined) {
                setData('purchase_date', undefined);
            }
        }
    }, [purchaseMonth, purchaseDay, purchaseYear, daysInMonth, setData, data.purchase_date, clearErrors, formErrors.purchase_date]); // Rerun when any date part changes

    // --- Generic Input Change Handler ---
    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target as (HTMLInputElement | HTMLTextAreaElement) & { name: keyof InitialFormValues };
        setData(name, value);
        // Clear errors for the field when the user types
        if (formErrors[name]) {
            clearErrors(name);
        }
    };

    // --- Generic Select Change Handler ---
    const handleSelectChange = (name: keyof InitialFormValues, value: string) => {
        setData(name, value);
        // Clear errors for the field when the user selects an option
        if (formErrors[name]) {
            clearErrors(name);
        }
    };

    // --- Purchase Date Input Handlers ---
    const handlePurchaseMonthChange = (value: string) => {
        setPurchaseMonth(value ? parseInt(value) : null);
        if (formErrors.purchase_date) clearErrors('purchase_date'); // Clear combined error
    };
    const handlePurchaseDayChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPurchaseDay(e.target.value);
        if (formErrors.purchase_date) clearErrors('purchase_date'); // Clear combined error
    };
    // Validate day on blur
    const handlePurchaseDayBlur = (e: React.FocusEvent<HTMLInputElement>) => {
        const dayNum = parseInt(e.target.value);
        if (e.target.value !== '' && (isNaN(dayNum) || dayNum < 1 || dayNum > daysInMonth)) {
            setPurchaseDay(''); // Clear if invalid day number
            // Optionally show a specific error or rely on the combined date validation
        }
    };
    const handlePurchaseYearChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPurchaseYear(e.target.value);
        if (formErrors.purchase_date) clearErrors('purchase_date'); // Clear combined error
    };
    // Validate year on blur
    const handlePurchaseYearBlur = (e: React.FocusEvent<HTMLInputElement>) => {
        const yearNum = parseInt(e.target.value);
        // Basic year range validation
        if (e.target.value !== '' && (isNaN(yearNum) || yearNum < 1900 || yearNum > currentYear + 1)) {
            setPurchaseYear(''); // Clear if invalid year
            // Optionally show a specific error or rely on the combined date validation
        }
    };

    // --- Memoized Data for Select Options ---

    // Filter out invalid vehicle classes (e.g., null or empty name)
    const validVehicleClass = useMemo(
        () =>
            Array.isArray(vehicle_class) ? vehicle_class.filter((v): v is VehicleClass => !!v && typeof v.name === 'string' && v.name !== '') : [],
        [vehicle_class],
    );

    // Filter out invalid vehicle makers
    const validVehicleMakers = useMemo(
        () =>
            Array.isArray(vehicle_makers)
                ? vehicle_makers.filter((v): v is VehicleMakerType => !!v && typeof v.name === 'string' && v.name !== '')
                : [],
        [vehicle_makers],
    );

    // Filter out invalid vehicle statuses
    const validVehicleStatus = useMemo(
        () =>
            Array.isArray(vehicle_status)
                ? vehicle_status.filter((v): v is VehicleStatusType => !!v && typeof v.status_name === 'string' && v.status_name !== '')
                : [],
        [vehicle_status],
    );

    // Filter models based on the selected maker
    const availableModels = useMemo(() => {
        const models = Array.isArray(vehicle_models) ? vehicle_models : [];
        // Ensure dependencies are valid before filtering
        if (!data.make || !validVehicleMakers.length || !models.length) return [];
        // Find the selected maker object to get its ID
        const selectedMaker = validVehicleMakers.find((m) => m.name === data.make);
        // Filter models matching the selected maker's ID
        return selectedMaker
            ? models.filter((m): m is VehicleModelType => m && typeof m.maker_id !== 'undefined' && String(m.maker_id) === String(selectedMaker.id))
            : [];
    }, [data.make, vehicle_models, validVehicleMakers]); // Rerun when make, models, or makers change

    // --- Specific Handler for Make Change ---
    // Reset model when make changes
    const handleMakeChange = (value: string) => {
        setData((prev) => ({ ...prev, make: value, model: '' })); // Reset model selection
        if (formErrors.make) clearErrors('make');
        if (formErrors.model) clearErrors('model'); // Also clear model error if make changes
    };

    // --- Form Submission Handler ---
    const handleSubmit: FormEventHandler = (e) => {
        e.preventDefault(); // Prevent default form submission
        clearErrors(); // Clear previous errors before submitting

        const url = '/vehicles/register'; // Fixed URL for creating vehicles

        // Define error handling callback for Inertia post
        const handleError = (errs: Record<string, string>) => {
            console.error('Create error:', errs);
            // Show specific error messages using toast notifications
            if (errs && Object.keys(errs).length > 0) {
                Object.entries(errs).forEach(([, msg]) => {
                    if (msg) toast.error(msg);
                });
            } else {
                // Generic error if no specific messages are provided
                toast.error('Failed to create vehicle. Please check the form.');
            }
        };

        // Define success handling callback for Inertia post
        const handleSuccess = () => {
            onSubmitSuccess(); // Call the provided success callback (e.g., close sheet, refresh list)
        };

        // Perform the POST request using Inertia
        post(url, {
            onSuccess: handleSuccess,
            onError: handleError,
            preserveState: true, // Consider if you want to preserve state on validation errors
            preserveScroll: true, // Consider preserving scroll position
        });
    };

    // --- Constants for UI ---
    const suggestedLocations = ['With Customer', 'Front Garage', 'Rear Garage', 'Workshop'];
    const title = 'Create New Vehicle';
    const description = "Fill in the details for the new vehicle. Click save when you're done.";

    // --- JSX ---
    return (
        <div className="px-1 py-4 md:px-4">
            {' '}
            {/* Add padding */}
            {/* Form element with submit handler */}
            <form onSubmit={handleSubmit} className="space-y-6">
                {' '}
                {/* Increased spacing */}
                {/* Basic Information Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Basic Information</CardTitle>
                        <CardDescription>Essential details about the vehicle.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {/* Using FormField component for consistency */}
                        <FormField label="Vehicle No" htmlFor="create-vehicle_no" error={formErrors.vehicle_no} required>
                            <Input
                                id="create-vehicle_no"
                                name="vehicle_no" // Add name attribute
                                value={data.vehicle_no}
                                onChange={handleInputChange}
                                autoFocus // Focus on the first field
                                autoComplete="off"
                                className={cn(formErrors.vehicle_no && 'border-red-500')}
                            />
                        </FormField>

                        <FormField label="Make" htmlFor="create-make" error={formErrors.make} required>
                            <Select
                                required
                                name="make"
                                value={data.make || ''}
                                onValueChange={handleMakeChange} // Use specific handler to reset model
                                disabled={processing || validVehicleMakers.length === 0}
                            >
                                <SelectTrigger id="create-make" className={cn(formErrors.make && 'border-red-500')} aria-label="Select maker">
                                    <SelectValue placeholder="Select maker" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Maker</SelectLabel>
                                        {validVehicleMakers.map((m) => (
                                            <SelectItem key={m.id} value={m.name}>
                                                {/* Capitalize first letter */}
                                                {m.name.charAt(0).toUpperCase() + m.name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {validVehicleMakers.length === 0 && (
                                            <SelectItem value="no-makers" disabled>
                                                No makers available
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>

                        <FormField label="Model" htmlFor="create-model" error={formErrors.model} required>
                            <Select
                                required
                                name="model"
                                value={data.model || ''}
                                onValueChange={(v) => handleSelectChange('model', v)}
                                disabled={processing || !data.make || availableModels.length === 0} // Disable if no make selected or no models available
                            >
                                <SelectTrigger id="create-model" className={cn(formErrors.model && 'border-red-500')} aria-label="Select model">
                                    <SelectValue placeholder={!data.make ? 'Select make first' : 'Select model'} />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Model</SelectLabel>
                                        {availableModels.map((m) => (
                                            <SelectItem key={m.id} value={m.name}>
                                                {m.name.charAt(0).toUpperCase() + m.name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {/* Show message if make is selected but no models found */}
                                        {data.make && availableModels.length === 0 && (
                                            <SelectItem value="no-models" disabled>
                                                No models found for {data.make}
                                            </SelectItem>
                                        )}
                                        {/* Show message if make is not selected */}
                                        {!data.make && (
                                            <SelectItem value="select-make" disabled>
                                                Select a make first
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>

                        <FormField label="Year" htmlFor="create-year" error={formErrors.year} required>
                            <Input
                                id="create-year"
                                name="year" // Add name attribute
                                type="number"
                                value={data.year}
                                onChange={handleInputChange}
                                className={cn(formErrors.year && 'border-red-500')}
                                min="1900"
                                max={currentYear + 1} // Allow next year's models
                            />
                        </FormField>

                        <FormField label="License Plate" htmlFor="create-license_plate" error={formErrors.license_plate} required>
                            <Input
                                id="create-license_plate"
                                name="license_plate" // Add name attribute
                                value={data.license_plate}
                                onChange={handleInputChange}
                                className={cn(formErrors.license_plate && 'border-red-500')}
                            />
                        </FormField>

                        <FormField label="VIN" htmlFor="create-vin" error={formErrors.vin}>
                            <Input
                                id="create-vin"
                                name="vin" // Add name attribute
                                value={data.vin ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.vin && 'border-red-500')}
                            />
                        </FormField>

                        <FormField label="Color" htmlFor="create-color" error={formErrors.color} required>
                            <Input
                                id="create-color"
                                name="color" // Add name attribute
                                value={data.color ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.color && 'border-red-500')}
                            />
                        </FormField>

                        <FormField label="Engine CC" htmlFor="create-engine_cc" error={formErrors.engine_cc} required>
                            <Input
                                id="create-engine_cc"
                                name="engine_cc" // Add name attribute
                                type="number"
                                value={data.engine_cc ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.engine_cc && 'border-red-500')}
                                min="0"
                            />
                        </FormField>

                        <FormField label="Class" htmlFor="create-vehicle_class_id" error={formErrors.vehicle_class_id} required>
                            <Select
                                required
                                name="vehicle_class_id"
                                // Note: We store the ID, but the value in the Select should match an option's value (using name here)
                                // The backend needs to map the submitted name back to an ID or change the value here to ID
                                value={data.vehicle_class_id || ''} // Assuming you submit the name, adjust if ID is needed
                                onValueChange={(v) => handleSelectChange('vehicle_class_id', v)} // Adjust if submitting ID
                                disabled={processing || validVehicleClass.length === 0}
                            >
                                <SelectTrigger
                                    id="create-vehicle_class_id"
                                    className={cn(formErrors.vehicle_class_id && 'border-red-500')}
                                    aria-label="Select Class"
                                >
                                    <SelectValue placeholder="Select class" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Class</SelectLabel>
                                        {/* Ensure the `value` here matches what you intend to submit */}
                                        {validVehicleClass.map((c) => (
                                            <SelectItem key={c.id} value={c.name}>
                                                {' '}
                                                {/* Using name as value */}
                                                {c.name.charAt(0).toUpperCase() + c.name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {validVehicleClass.length === 0 && (
                                            <SelectItem value="no-classes" disabled>
                                                No classes available
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>
                    </CardContent>
                </Card>
                {/* Purchase & Pricing Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Purchase & Pricing</CardTitle>
                        <CardDescription>Details about acquisition and rental costs.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <FormField label="Purchase Price" htmlFor="create-purchase_price" error={formErrors.purchase_price} required>
                            <Input
                                id="create-purchase_price"
                                name="purchase_price" // Add name attribute
                                type="number"
                                step="0.01" // Allow decimals
                                value={data.purchase_price ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.purchase_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 15000.00"
                            />
                        </FormField>

                        {/* Purchase Date using separate inputs */}
                        <FormField label="Purchase Date" htmlFor="purchase_month" error={formErrors.purchase_date} required>
                            <div className="flex w-full flex-col gap-2 sm:flex-row sm:gap-3">
                                {/* Month Select */}
                                <div className="flex-1">
                                    <Label htmlFor="purchase_month" className="sr-only">
                                        Month
                                    </Label>
                                    <Select value={purchaseMonth ? String(purchaseMonth) : ''} onValueChange={handlePurchaseMonthChange}>
                                        <SelectTrigger
                                            id="purchase_month"
                                            className={cn(formErrors.purchase_date && 'border-red-500')}
                                            aria-label="Month"
                                        >
                                            <SelectValue placeholder="Month" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {monthOptions.map((option) => (
                                                <SelectItem key={option.value} value={String(option.value)}>
                                                    {option.label}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                                {/* Day Input */}
                                <div className="flex-1">
                                    <Label htmlFor="purchase_day" className="sr-only">
                                        Day
                                    </Label>
                                    <Input
                                        id="purchase_day"
                                        type="number"
                                        placeholder="Day"
                                        value={purchaseDay}
                                        onChange={handlePurchaseDayChange}
                                        onBlur={handlePurchaseDayBlur} // Validate on blur
                                        min="1"
                                        max={daysInMonth} // Dynamic max based on month/year
                                        disabled={!purchaseMonth} // Disable until month is selected
                                        className={cn(formErrors.purchase_date && 'border-red-500')}
                                        aria-label="Day"
                                    />
                                </div>
                                {/* Year Input */}
                                <div className="flex-1">
                                    <Label htmlFor="purchase_year" className="sr-only">
                                        Year
                                    </Label>
                                    <Input
                                        id="purchase_year"
                                        type="number"
                                        placeholder="Year"
                                        value={purchaseYear}
                                        onChange={handlePurchaseYearChange}
                                        onBlur={handlePurchaseYearBlur} // Validate on blur
                                        min="1900"
                                        max={currentYear} // Max current year for purchase date
                                        className={cn(formErrors.purchase_date && 'border-red-500')}
                                        aria-label="Year"
                                    />
                                </div>
                            </div>
                        </FormField>

                        <FormField label="Compensation Price" htmlFor="create-compensation_price" error={formErrors.compensation_price} required>
                            <Input
                                id="create-compensation_price"
                                name="compensation_price" // Add name attribute
                                type="number"
                                step="0.01"
                                value={data.compensation_price ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.compensation_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 20000.00"
                            />
                        </FormField>

                        <FormField label="Daily Price" htmlFor="create-daily_rental_price" error={formErrors.daily_rental_price} required>
                            <Input
                                id="create-daily_rental_price"
                                name="daily_rental_price" // Add name attribute
                                type="number"
                                step="0.01"
                                value={data.daily_rental_price}
                                onChange={handleInputChange}
                                className={cn(formErrors.daily_rental_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 50.00"
                            />
                        </FormField>

                        <FormField label="Weekly Price" htmlFor="create-weekly_rental_price" error={formErrors.weekly_rental_price} required>
                            <Input
                                id="create-weekly_rental_price"
                                name="weekly_rental_price" // Add name attribute
                                type="number"
                                step="0.01"
                                value={data.weekly_rental_price}
                                onChange={handleInputChange}
                                className={cn(formErrors.weekly_rental_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 300.00"
                            />
                        </FormField>

                        <FormField label="Monthly Price" htmlFor="create-monthly_rental_price" error={formErrors.monthly_rental_price} required>
                            <Input
                                id="create-monthly_rental_price"
                                name="monthly_rental_price" // Add name attribute
                                type="number"
                                step="0.01"
                                value={data.monthly_rental_price}
                                onChange={handleInputChange}
                                className={cn(formErrors.monthly_rental_price && 'border-red-500')}
                                min="0"
                                placeholder="e.g., 1000.00"
                            />
                        </FormField>
                    </CardContent>
                </Card>
                {/* Status & Location Section */}
                <Card>
                    <CardHeader>
                        <CardTitle>Status & Location</CardTitle>
                        <CardDescription>Current status and location of the vehicle.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <FormField label="Status" htmlFor="create-current_status_id" error={formErrors.current_status_id} required>
                            <Select
                                required
                                name="current_status_id"
                                // Similar to Class, ensure value matches an option (using status_name here)
                                // Backend needs to map name to ID or change value here
                                value={data.current_status_id || ''} // Assuming submitting name
                                onValueChange={(v) => handleSelectChange('current_status_id', v)} // Adjust if submitting ID
                                disabled={processing || validVehicleStatus.length === 0}
                            >
                                <SelectTrigger
                                    id="create-current_status_id"
                                    className={cn(formErrors.current_status_id && 'border-red-500')}
                                    aria-label="Select status"
                                >
                                    <SelectValue placeholder="Select status" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectGroup>
                                        <SelectLabel>Vehicle Status</SelectLabel>
                                        {/* Ensure value matches what's submitted */}
                                        {validVehicleStatus.map((s) => (
                                            <SelectItem key={s.id} value={s.status_name}>
                                                {' '}
                                                {/* Using name as value */}
                                                {s.status_name.charAt(0).toUpperCase() + s.status_name.slice(1)}
                                            </SelectItem>
                                        ))}
                                        {validVehicleStatus.length === 0 && (
                                            <SelectItem value="no-status" disabled>
                                                No statuses available
                                            </SelectItem>
                                        )}
                                    </SelectGroup>
                                </SelectContent>
                            </Select>
                        </FormField>

                        <FormField label="Location" htmlFor="create-current_location" error={formErrors.current_location}>
                            <Input
                                id="create-current_location"
                                name="current_location" // Add name attribute
                                value={data.current_location ?? ''}
                                onChange={handleInputChange}
                                className={cn(formErrors.current_location && 'border-red-500')}
                                list="create-location-suggestions" // Link to datalist
                                placeholder="e.g., Front Garage"
                            />
                            {/* Datalist provides suggestions but allows free text */}
                            <datalist id="create-location-suggestions">
                                {suggestedLocations.map((loc) => (
                                    <option key={loc} value={loc} />
                                ))}
                            </datalist>
                            <p className="text-muted-foreground mt-1 text-xs">Type or select a location (e.g., With Customer, Front Garage).</p>
                        </FormField>

                        <FormField label="Notes" htmlFor="create-notes" error={formErrors.notes} labelClassName="pt-2">
                            {' '}
                            {/* Align label top */}
                            <Textarea
                                id="create-notes"
                                name="notes" // Add name attribute
                                value={data.notes ?? ''}
                                onChange={handleInputChange}
                                className={cn('col-span-3', formErrors.notes && 'border-red-500')}
                                rows={4} // Increased rows
                                placeholder="Add any relevant notes about the vehicle..."
                            />
                        </FormField>
                    </CardContent>
                </Card>
                {/* Form Footer with Actions */}
                <SheetFooter className="mt-6 border-t pt-4">
                    {' '}
                    {/* Add margin top */}
                    {/* Cancel Button closes the sheet */}
                    <SheetClose asChild>
                        <Button type="button" variant="outline" disabled={processing}>
                            Cancel
                        </Button>
                    </SheetClose>
                    {/* Submit Button */}
                    <Button type="submit" disabled={processing}>
                        {/* Show different text while processing */}
                        {processing ? 'Saving...' : 'Save Vehicle'}
                    </Button>
                </SheetFooter>
            </form>
        </div>
    );
}

// Export the component for use
export default Create;
